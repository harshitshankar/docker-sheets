Perfect! Let’s organize this step by step so you can start your app and test it. I’ll give both docker-compose and docker run options. I’ll also include the port updates so MySQL doesn’t conflict.

Option 1: Using Docker Compose (recommended)

docker-compose.yml (ready-to-use, updated MySQL host port to 3307 to avoid conflicts):

services:
  db:
    image: mysql:8.0.39
    container_name: userdb
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: userdb
    ports:
      - "3307:3306"  # host:container
    volumes:
      - mysql_data:/var/lib/mysql

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.4
    container_name: zookeeper
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.4.4
    container_name: kafka
    restart: always
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"

volumes:
  mysql_data:


Start all services:

docker-compose up -d


-d → detached mode (runs in background)

Check running containers:

docker ps

Option 2: Using individual Docker run commands

If you prefer running manually:

# MySQL
docker run -d --name userdb -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=userdb -p 3307:3306 mysql:8.0.39

# Zookeeper
docker run -d --name zookeeper -p 2181:2181 confluentinc/cp-zookeeper:7.4.4

# Kafka
docker run -d --name kafka -p 9092:9092 --link zookeeper:zookeeper \
  -e KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181 \
  -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092 \
  -e KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1 \
  confluentinc/cp-kafka:7.4.4

Step 3: Run your Spring Boot app Docker container

Assuming Jenkins pipeline already built and pushed the image:

docker run -d --name usermgmt -p 8080:8080 --link userdb:db --link kafka:kafka harshitshankar1998/usermgmt-app:latest


--link ensures your app container can talk to MySQL and Kafka by container names.

App runs on host port 8080.

Step 4: Connect your app to MySQL and Kafka

Make sure your Spring Boot app’s application.properties points to the right ports:

# MySQL
spring.datasource.url=jdbc:mysql://localhost:3307/userdb
spring.datasource.username=root
spring.datasource.password=root

# Kafka (for producer/consumer)
spring.kafka.bootstrap-servers=localhost:9092

Step 5: Test in browser or Postman

App Health check (assuming /actuator/health exists):

http://localhost:8080/actuator/health


User endpoints (example endpoints based on the project):

HTTP Method	Endpoint	Description
GET	/api/users	List all users
GET	/api/users/{id}	Get user by ID
POST	/api/users	Create new user
PUT	/api/users/{id}	Update user
DELETE	/api/users/{id}	Delete user

Use Postman to send requests to http://localhost:8080/api/users.

✅ After this, your full stack should be up:

MySQL: port 3307

Kafka: port 9092

Zookeeper: port 2181

Spring Boot app: port 8080

You can now hit endpoints in Postman or your browser.
